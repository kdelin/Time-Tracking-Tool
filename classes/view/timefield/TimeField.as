// Define the Packagepackage classes.view.timefield {		// Import Necessary Classes	import flash.filters.DropShadowFilter;	import flash.display.DisplayObject;	import flash.filters.GlowFilter;	import flash.events.Event;	import flash.display.MovieClip;	import flash.display.Stage;	import flash.events.KeyboardEvent;		import classes.view.timefield.TimeFieldArrow;	import classes.view.timefield.TimeFieldInput;	//import classes.view.timefield.TimeFieldEvent;			// Define the Class	public final class TimeField extends TimeFieldSprite {				private var h							:int;   						// my hour		private var m							:int;   						// my minute		private var ih							:int = 44.5;					// height of input field					private var nt							:String;						// new text, used as temp holder				public var mc_input						:MovieClip = new MovieClip();	// movieclip that holds input text		public var mc_arrows					:MovieClip = new MovieClip();	// movieclip that holds scroll arrows				public var nobj							:Object = new Object();			// new object used as temp object								// Instantiate the Class		public function TimeField (obj:Object = null ) : void {						TimeFieldListener.set ( { target:this, addedToStage:on_added });						// Ensure that an Object Exists - populate temp obj			obj = obj || new Object ( ); nobj = obj;						calculateTime();					}				// Proceed once added to stage		public function on_added(e:Event ):void {						// Listen for events					this.addEventListener("PICKLIST_ARROW_UP", arrowUp);			this.addEventListener("PICKLIST_ARROW_DOWN", arrowDown);			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);						// Initialize/Reinitialize Properties			init ( nobj );		}				// Initialize/Reinitialize Properties		public function init ( obj:Object = null ) : void {						// Initialize/Reinitialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];						// Reset the Scale			scaleX = scaleY = 1;						// Draw graphics			drawGraphics();					}						//// FUNCTIONS FOR HANDLING CONTENT, CREATING UPDATING THE GRAPHICS CONTENT				private function calculateTime():void {						nt = nobj.time;						var st:String = nt;			var str:Array = st.split(":");			h = str[0]; m = str[1];						if ( nt.substr(0, 1) == "0" ) { nt = nt.substring(1); }; nt = h + "." + m;					}						private function drawGraphics():void {								// DRAW CONTENT ON STAGE						// Create MovieClip that will house input field and arrows			addChild(mc_input);			addChild(mc_arrows);						// place existing content in movieclips						mc_input.addChild(new TimeFieldInput({ text:nt }));			mc_arrows.addChild(new TimeFieldArrow({ direction:"up", x:40, y:1 }));			mc_arrows.addChild(new TimeFieldArrow({ direction:"down", x:40, y:11 }));						// Create filters Object 			filters = filters.concat ( new GlowFilter ( 0, 1, 3, 3, 1, 1, true, false ) );			filters = filters.concat ( new DropShadowFilter ( 10, 89.9993809572637, 0, 1, 20, 20, 0.09765625,3, true, false, false ) );			filters = filters.concat ( new DropShadowFilter ( 2, 89.9993809572637, 0, 1, 6, 6, 0.5, 3, false, false, false ) );									// Draw background			graphics.clear();			graphics.beginFill(0xFFFFFF);			graphics.drawRect( 0, 0, nobj.width, ih);		}				private function updateInput():void {			mc_input.removeChildAt(0);			mc_input.addChild( new TimeFieldInput ({ text:nt }));		}				private function closePickList():void {			var c:int = numChildren;						for ( var x:int = c; x--; ) { removeChildAt(x); };			graphics.clear();						end();		}						private function arrowUp(e:Event):void { 						if ( m == 75 ) {				m = 0; h++;			} else {				m += 25;			}						nt = String(h + "." + m);						updateInput();				}				private function arrowDown(e:Event):void { 					if ( h > 0 ) {				if ( m == 0 ) {					m = 75; h--;				} else {					m -= 25;				}			} else if ( h == 0 && m > 0 ) {				m -= 25;			}						nt = String(h + "." + m);						updateInput();		}						/// respond to key commands				private function onKey(e:KeyboardEvent):void {			if (e.keyCode == 38 ) { // up key				dispatchEvent(new Event("PICKLIST_ARROW_UP", true));			} else if (e.keyCode == 40 ) { // down key				dispatchEvent(new Event("PICKLIST_ARROW_DOWN", true));			} else if (e.keyCode == 13 ) { // enter key				closePickList();			}		}						// End all Loops and Listeners		public function end ( evt:Event = null ) : void {			dispatchEvent ( new Event ( 'end', true ) );		}	}}