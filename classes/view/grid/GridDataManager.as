// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.filters.GlowFilter;	import flash.geom.Rectangle;	import flash.geom.Point;	import flash.globalization.DateTimeFormatter;	import flash.globalization.LocaleID;	import flash.utils.ByteArray;		// Define the Class	internal final class GridDataManager {				// Save a Reference to Object Information		private var columnData:Vector.<Object> = new <Object> [ ];				// Instantiate the Class		public function GridDataManager ( obj:Object = null ) : void {			// Initialize Properties			init ( obj );		}				// Initialize/Reinitialize the Class		public function init ( obj:Object = null ) : void {			// Do Nothing if No Object is Given			if ( !obj ) return;			// Create a Byte Array			var byt:ByteArray = new ByteArray ( );			// Save the Objecy Bytes			byt.writeObject ( obj || { } );			// Return to the Begining of the Byte Array			byt.position = 0;			// Read the Objecy Bytes			var info_obj:Object = obj = byt.readObject ( );			// Create a Vector for Column Data			columnData = new Vector.<Object> ( obj.columnLabels.length );			// Loop through Column Data			for ( var n:int = columnData.length; n--; ) {				// Create an Object for Column Data				var dat:Object = columnData [ n ] = {					// Create a Property for Column Label					label: obj.columnLabels [ n ],					// Create a Property for Column Format					format: obj.columnFormats [ n ],					// Create a Property for Column Width					width: obj.columnWidths [ n ],					// Create a Property for Column Picklist					list: obj.picklistData.pop ( ),					// Create a Property for Column Row Values					rows: new Array ( obj.rowData.length );				};				// Save Row Values within the Column Data Object				for ( var i:int = dat.rows.length; i--; ) dat.rows [ i ] = obj.rowData [ i ][ n ];				//							}		}	}}