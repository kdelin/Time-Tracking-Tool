// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.filters.GlowFilter;	import flash.geom.Rectangle;	import flash.geom.Point;		// Define the Class	public final class GridList extends GridSprite {				// Crate a Vector for GridColumn Objects		public var gridcolumn:Vector.<GridColumn> = new <GridColumn> [ ];		// Crate a Vector for GridVScroller Objects		public var gridvscroller:Vector.<GridVScroller> = new <GridVScroller> [ ];		// Crate a Vector for GridHScroller Objects		public var gridhscroller:Vector.<GridHScroller> = new <GridHScroller> [ ];		// Crate a Vector for GridRail Objects		public var gridrail:Vector.<GridRail> = new <GridRail> [ ];		// Save a Reference to Grid Data Manager Object		private var Data:GridDataManager = new GridDataManager ( );		// Save a Reference to the Number of Visible Rows		public var rows:int = 3;				// Instantiate the Class		public function GridList ( obj:Object ) : void {			// Initialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];			// Reset the Scale			scaleX = scaleY = 1;			// Pass the Data to the Data Mananager Object			Data.init ( obj );			// Save a Reference to the Grid Width			var wid:Number = obj.width || 780;			// Save a Reference to Grid Height;			var hei:Number = rows * 45 + 75;			// Save a Reference to Column Spacing;			var spc:Number = Math.max ( wid / Data.rowCount, 156 );			// Define the Visible Dimensions of the Grid List			scrollRect = new Rectangle ( 0, 0, wid, hei );			// Set the Filters			filters = [ new GlowFilter ( 0, 1, 3, 0, 1, 1, true, false ) ];			// Add Top Bar			addChild ( new GridRail ( { content:[ new GridArrow ( { x:760, y:7.75 } ) ] } ) );			// Display Columns and Headings			for ( var i:int = 0, l:int = Data.columnCount; i < l; i++ ) addChild ( new GridColumn ( { y:20, Data:Data.columnData [ i ] } ) );			// Add Vertical Scroll Scroll Bar			addChild ( new GridVScroller ( { x:wid - 10, y:20, height:hei - 30, dataLength:Data.columnCount, viewLength:rows  } ) );			// Add Horizontal Scroll Scroll Bar			addChild ( new GridHScroller ( { y:hei - 10.05, width:wid, dataLength:Data.columnCount, viewLength:int ( wid / spc ) } ) );			// Show/Scroll Data in the List			show_row ( { scroll:0 } );			// Listen for Events			GridListener.set ( { target:this, scrollRow:show_row, scrollColumn:show_column } );			// Cache as Bitmap			cacheAsBitmap = true;		}				// Initialize/Reinitialize Properties		public function init ( obj:Object ) : void {			// Initialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];		}						// Show/Scroll Data in the List		private function show_row ( obj:Object ) : void {			/*			// Calculate the Row Position;			var ndx:int = Math.max ( 0, Math.round ( ( Data.rowValues.length - rows ) * obj.scroll ) );			// Filter Data			var arr:Vector.<Vector.<String>> = Data.rowValues.concat ( ).splice ( ndx, 0 );			// Show Data			for each ( var col:GridColumn in gridcolumn ) col.showData ( arr );			*/		}						// Show/Scroll Data in the List		private function show_column ( obj:Object ) : void {			/*			// Save a Refernece to the Scroll Rectangle			var rec:Rectangle = scrollRect;			// Calculate the Row Position			var n:Number = Math.round ( Data.columnValues.length * obj.scroll );			// Set Fixed-Position Elements			gridvscroller [ 0 ].x = gridcolumn [ n ].x + width - 10;			// Set Fixed-Position Elements			gridhscroller [ 0 ].x = gridrail [ 0 ].x = rec.x = gridcolumn [ n ].x;			// Update the Scroll Rectangle			scrollRect = rec;			*/		}	}}