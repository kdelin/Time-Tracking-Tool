// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.filters.GlowFilter;	import flash.geom.Rectangle;	import flash.geom.Point;	import flash.display.Shape;	import flash.events.MouseEvent;	import flash.events.Event;		import classes.view.roweditor.RowEditor;		// Define the Class	public final class GridList extends GridSprite {				// Create a Varianble for the Arguments		internal var arg:Object = { width: 780, visibleRows: 3, space: 156, height:200 };		// Crate a Vector for GridColumn Objects		public var gridcolumn:Vector.<GridColumn> = new <GridColumn> [ ];		// Save a Reference to Grid Data Manager Object		private var data:GridData;		// Save a Reference to The Vertical Scroll Position		private var v_pos:int = 0;		// Save a Reference to The Vertical Scroll Position		private var sort_ndx:Array = [ ];		// Save a Reference to The Sort Indicator Arrow		private var sort_arw:Shape = new Shape ( );				// Instantiate the Class		public function GridList ( obj:Object ) : void {			// Initialize Properties			init ( obj );			// Create a GridData Object			data = new GridData ( obj );			// Save a Reference to Grid Height;			arg.height = arg.visibleRows * 45 + 75;			// Define the Visible Dimensions of the Grid List			scrollRect = new Rectangle ( 0, 0, arg.width, arg.height );			// Set the Filters			filters = [ new GlowFilter ( 0, 1, 3, 0, 1, 1, true, false ) ];			// Add Top Bar			addChild ( new GridRail ( { } ) );			// Display Columns and Headings			for each ( var dat:GridColumnData in data ) addChild ( new GridColumn ( { y:20, data:dat } ) );			// Add Vertical Scroll Scroll Bar			addChild ( new GridVScroller ( { x:arg.width - 10, y:20, height:arg.height - 30, data:data  } ) );			// Add Horizontal Scroll Scroll Bar			addChild ( new GridHScroller ( { y:arg.height - 10, width:arg.width, data:data } ) );			// Lock Data			gridcolumn.fixed = cacheAsBitmap = true;			// Listen for Events			GridListener.set ( { target:this, addedToStage:on_added, hScroll:gridcolumn [ 0 ].h_scroll, vScroll:v_scroll, sort:on_sort, edit:on_edit } );														}				private function on_added(e:Event):void {			stage.addEventListener(MouseEvent.MOUSE_DOWN, on_down);		}						private function on_down(e:MouseEvent):void {			if ( e.target.name == "btn_editRow" ) {				openRowEditor();			}		}						private function openRowEditor():void {						var obj:Object = {				// Specify Labels				labels: [ 'Campaign', 'Project', 'Deliverable', 'Assignee', 'Due Date', 'Hours Worked', 'Hours Estmated' ],				// Specify Values				values: [ 'McDonalds', '300x250 Banner', 1, 1, 1329612949486, 0, 3.5 ],				// Specify Data Types				formats: [ 'text', 'text', 'picklist', 'picklist', 'date', 'hours', 'hours' ],				// Specify Picklist Options				lists: [ [ 'Approved FLA', 'Approved FLA', 'Approved PSD', 'Approved Storyboard', 'Support' ], [ 'Kyle Roberts', 'Brian Shrader' ] ]			}						// Add a RowEditor Object to the Stage			var re:RowEditor = stage.addChild ( new RowEditor ( obj ) ) as RowEditor;			re.addEventListener("done", on_CloseRowEditor);					}		private function on_CloseRowEditor(e:Object):void {			trace("closing values = " + e.values);		}				// Update Row Data		private function on_sort ( evt:GridEvent ) : void {			// Hide the Previous Sort Indicator Arrow			sort_arw.visible = false;			// Show the New Sort Indicator Arrow			Shape ( sort_arw = evt.arrow ).visible = true;			// Reverse the Sort Order If Appropriate			if ( !!sort_arw.rotation ) evt.sortIndex.reverse ( );			// Update Row Data			v_scroll ( evt );		}				// React to Edit Events		private function on_edit ( evt:GridEvent ) : void {			// Hide the Short Indicator Arrow			sort_arw.visible = false;		}				// Update Row Data		private function v_scroll ( obj:Object ) : void {			// Save a Reference to the Sort Index			var srt:Array = sort_ndx = obj.sortIndex || sort_ndx;			// Save a Reference to the Scroll Position			var scr:int = v_pos = ( obj.scroll + 1 || v_pos + 1 || 1 ) - 1;			// Loop through the Columns			for ( var c:int = 0, col:GridColumn = gridcolumn [ 0 ]; col; col = col.nextSiblingOfType ) {				// Save a Reference to the Columns Data Object				var dat:GridColumnData = data [ c++ ];				// Create a Variable for Iterating Data				var r:int = 0;				// Loop through the Rows				for ( var row:GridRow = col.gridrow [ 0 ]; row; row = row.nextSiblingOfType ) {					// Save a Reference to the Index					var ndx:int = scr + r++;					// Display Appropriate Text for Each Row Cell					row.init ( { data:dat [ ( srt [ ndx ] + 1 || ndx + 1 ) - 1 ] } );				}			}		}	}}