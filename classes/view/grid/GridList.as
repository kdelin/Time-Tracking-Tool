// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.filters.GlowFilter;	import flash.geom.Rectangle;	import flash.geom.Point;	import flash.events.Event;	import flash.utils.setTimeout;	import flash.events.MouseEvent;		// Define the Class	public final class GridList extends GridSprite {				// Create a Varianble for the Arguments		internal var arg:Object = { width: 780, visibleRows: 3, space: 156, height:200 };		// Crate a Vector for GridColumn Objects		public var gridcolumn:Vector.<GridColumn> = new <GridColumn> [ ];		// Crate a Vector for GridVScroller Objects		public var gridvscroller:Vector.<GridVScroller> = new <GridVScroller> [ ];		// Crate a Vector for GridHScroller Objects		public var gridhscroller:Vector.<GridHScroller> = new <GridHScroller> [ ];		// Crate a Vector for GridRail Objects		public var gridrail:Vector.<GridRail> = new <GridRail> [ ];		// Crate a Vector for GridRail Objects		public var column_one:GridColumn;		// Save a Reference to Grid Data Manager Object		private var data:GridData;				// Instantiate the Class		public function GridList ( obj:Object ) : void {			// Initialize Properties			init ( obj );			// Create a GridData Object			data = new GridData ( obj );			// Save a Reference to Grid Height;			arg.height = arg.visibleRows * 45 + 75;			// Define the Visible Dimensions of the Grid List			scrollRect = new Rectangle ( 0, 0, arg.width, arg.height );			// Set the Filters			filters = [ new GlowFilter ( 0, 1, 3, 0, 1, 1, true, false ) ];			// Add Top Bar			addChild ( new GridRail ( { } ) );			// Display Columns and Headings			for each ( var dat:GridColumnData in data ) addChild ( new GridColumn ( { y:20, data:dat } ) );			// Add Vertical Scroll Scroll Bar			addChild ( new GridVScroller ( { x:arg.width - 10, y:20, height:arg.height - 30, data:data  } ) );			// Add Horizontal Scroll Scroll Bar			addChild ( new GridHScroller ( { y:arg.height - 10, width:arg.width, data:data } ) );			// Save a Reference to the First Column			column_one = gridcolumn [ 0 ];			// Listen for Events			GridListener.set ( { target:this, hScroll:column_one.h_scroll, vScroll:v_scroll } );			// Cache as Bitmap			cacheAsBitmap = true;		}				// Update Row Data		private function v_scroll ( obj:Object ) {			// Save a Reference to the Scroll Position			var scr:int = obj.scroll || 0;			// Save a Referecen to the First Column			var col:GridColumn = column_one;			// Create a Variable for Iterating Data			var c:int = 0;			// Loop through the Columns Data			do {				// Save a Referecen to the First Row				var row:GridRow = col.row_one;				// Save a Reference to the Columns Data Object				var dat:GridColumnData = data [ c++ ];				// Create a Variable for Iterating Data				var r:int = 0;				// Loop through the Rows				do {					// Display Appropriate Text for Each Row Cell					row.init ( { data:dat [ scr + r++ ] } );				// Stop Looping when there Are No More Rows				} while ( row = row.nextSiblingOfType );			// Stop Looping when there Are No More Columns			} while ( col = col.nextSiblingOfType );		}	}}