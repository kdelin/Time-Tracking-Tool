// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.filters.GlowFilter;	import flash.display.Shape;	import flash.display.DisplayObject;	import flash.geom.Rectangle;	import flash.events.Event;		// Define the Class	internal final class GridHScroller extends GridSprite {						// Crate a Vector for GridSlider Objects		public var gridslider:Vector.<GridSlider> = new <GridSlider> [ ];		// Create a Variable for the Data Length		public var dataLength:Number = 0;		// Create a Variable for the View Length		public var viewLength:Number = 0;		// Create a Variable for the Scroll Position		public var scroll:Number = 0;				// Instantiate the Class		public function GridHScroller ( obj:Object ) : void {			// Show Slider			addChild ( new GridSlider ( { blurY:0 } ) );			// Set the Filters			filters = [ new GlowFilter ( 0, 1, 0, 3, 0.796875, 3, true, false ) ];			// Listen for Events			GridListener.set ( { target:this, drag:on_drag } );			// Initialize Properties			init ( obj );		}				// Initialize/Reinitialize Properties		public function init ( obj:Object ) : void {			// Initialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];			// Reset the Scale			scaleX = scaleY = 1;			// Clear Graphics			graphics.clear ( );			// Define Background Color			graphics.beginFill ( 0xBDBDBD );			// Draw an Rectangle			graphics.drawRect ( 0, 0, obj.width, obj.height || 10 );			// Calculate Slider Size			var siz:Number = Math.max ( 0, Math.min ( 1, viewLength / dataLength ) ) * width;			// Calculate Slider Gap			var gap:Number = width - siz;			// Update Slider			gridslider [ 0 ].init ( { width:siz, y:gap * scroll, visible:!!gap, drag:new Rectangle ( 0, 0, gap, 0 ) } );		}				// React to Drag Event		private function on_drag ( evt:Event ) : void {			// Save a Reference to the Target			var tar:GridSlider = evt.target as GridSlider;			// Save a Reference to the Scroll Position			scroll = tar.x / ( width - tar.width );			// Dispatch a scrollData Event			dispatchEvent ( new GridEvent ( { type:'scrollColumn', scroll:scroll } ) );		}	}}