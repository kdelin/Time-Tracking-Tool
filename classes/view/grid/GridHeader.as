// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.filters.DropShadowFilter;	import flash.display.DisplayObject;	import flash.filters.GlowFilter;	import flash.events.Event;		// Define the Class	internal final class GridHeader extends GridSprite {				// Define Default Arguments		internal const arg:Object = { data: { heading: 'Heading' }, width: 780, height: 45 };		// Crate a Vector for GridHeading Objects		public var gridheading:Vector.<GridHeading> = new <GridHeading> [ ];		// Crate a Vector for GridArrow Objects		public var gridarrow:Vector.<GridArrow> = new <GridArrow> [ ];				// Instantiate the Class		public function GridHeader ( obj:Object ) : void {			// Initialize Properties			init ( obj );			// Add Heading Text			addChild ( new GridHeading ( { y: 13, text: arg.data.heading } ) );			// Add Arow			addChild ( new GridArrow ( { y:22.5, x:40 + gridheading [ 0 ].textWidth, visible:false } ) );			// Create DropShadowFilter Object			filters = filters.concat ( new DropShadowFilter ( 5, 90, 0xFFFFFF, 1, 0, 5, .3, 3, true, false, false ) );			// Create GlowFilter Object			filters = filters.concat ( new GlowFilter ( 0, 1, 0, 3, 1, 1, true, false ) );			// Define a Fill Color			graphics.beginFill ( 0x8A8A8A );			// Draw a Rectangle			graphics.drawRect ( -25, 0, arg.width + 25, arg.height );			// Listen for Events			GridListener.set ( { target:this, click:on_click } );			// Lock Child References			gridarrow.fixed = gridheading.fixed = true;		}				// React to Sort Event		public function no_arrow ( evt:Event ) : void {			// Do Nothing if We're the Target			if ( evt.target === this ) return;			// Save a Reference to the Arrow			var arw:GridArrow = gridarrow [ 0 ];			// Hide the Arrow			arw.visible = false;			// Rotate the Arrow to Point Downwards			arw.rotation = 0;		}				// React to Click Events		private function on_click ( evt:Event ) : void {			// Save a Reference to the Arrow			var arw:GridArrow = gridarrow [ 0 ];			// Check that the Arrow is Hidden			if ( !arw.visible || arw.rotation ) {				// Shoe the Arrow				arw.visible = true;				// Rotate the Arrow to Point Downwards				arw.rotation = 0;			}			// Rotate the Arrow to Point Upwards			else arw.rotation = 180;			// Stop Event Propogation			evt.stopPropagation ( );			// Stop Default Behavior			evt.preventDefault ( );			// Dispatch a Sort Event			dispatchEvent ( new GridEvent ( { type:'sort', arrow:arw } ) );		}	}}