// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import classes.view.cursor.Cursor;	import classes.view.cursor.VResize;	import classes.view.cursor.Auto;	import flash.filters.DropShadowFilter;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Rectangle;	// Define the Class	internal final class GridVLine extends Sprite {				// Instantiate the Class		public function GridVLine ( obj:Object ) : void {			// Create DropShadowFilter Object			filters = filters.concat ( new DropShadowFilter ( 1, 0, 0x000000, 1, 2, 0, 0.5, 3, false, true, false ) );			// Create GlowFilter Object			filters = filters.concat ( new DropShadowFilter ( -1, 0, 0xFFFFFF, 1, 2, 0, 1, 3, false, false, false ) );			// Initialize Properties			init ( obj );		}				// Initialize/Reinitialize Properties		public function init ( obj:Object ) : void {			// Initialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];			// Reset the Scale			scaleX = scaleY = 1;			// Clear Graphics			graphics.clear ( );			// Define Transparent Fill			graphics.beginFill ( 0, 0 );			// Draw an Line			graphics.drawRect ( -3.5, 0, 7, obj.height );			// Define Transparent Fill			graphics.beginFill ( 0, 1 );			// Draw an Line			graphics.drawRect ( -1, 0, 1, obj.height );			// Set/Reset Event Listeners			reset_mouse ( null );		}				// React to Mouse Down Events		private function on_down ( evt:Event ) : void {			// Register Event Handlers			GridListener.set ( { target:this, rollOver:null, rollOut:null, mouseDown:null }, { target:stage, mouseUp:on_up, mouseMove:on_move } );			// Dispatch a startResize Event			dispatchEvent ( new Event ( 'startResize', true ) );			// Prevent Mouse Event Conflicts			stage.mouseChildren = false;		}						// React to Mouse Up Events		private function on_up ( evt:Event ) : void {			// Dispatch a stopResize Event			dispatchEvent ( new Event ( 'stopResize', true ) );			// Set/Reset Event Listeners			reset_mouse ( null );		}						// Set/Reset Event Listeners		private function reset_mouse ( evt:Event ) : void {			// Listen for Events			GridListener.set ( { target:this, rollOver:on_over, rollOut:reset_mouse, mouseDown:on_down }, { target:stage, mouseUp:null, mouseMove:null } );			// Allow Stage Events			if ( stage ) stage.mouseChildren = true;			// Show Default Mouse Cursor			Cursor.set ( Auto );		}				// React to Mouse Move Events		private function on_move ( evt:Event ) : void {			// Dispatch a resizeUpdate Event			dispatchEvent ( new Event ( 'resizeUpdate', true ) );		}				// React to Mouse Over Events		private function on_over ( evt:Event ) : void {			// Show Resize Mouse Cursor			Cursor.set ( VResize );		}	}}