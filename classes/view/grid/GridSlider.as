// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.filters.GlowFilter;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.events.Event;		// Define the Class	public final class GridSlider extends Sprite {				// Create a Vraiable for Drag Area		public var drag:Rectangle;		// Create a Vraiable for Drag Area		public var onDrag:Function;				// Instantiate the Class		public function GridSlider ( obj:Object ) : void {			// Initialize Properties			init ( obj );			// Show Pointer Cursor on Rollover			buttonMode = true;			// Set the Filters			filters = [ new GlowFilter ( 0, 1, 5, 5, 0.6679, 2, true, false ) ];		}				// Initialize/Reinitialize Properties		public function init ( obj:Object ) : void {			// Initialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];			// Reset the Scale			scaleX = scaleY = 1;			// Clear Drawings			graphics.clear ( );			// Start Draw Fill			graphics.beginFill ( 0, 0 );			// Draw Background Area			graphics.drawRect ( 0, 0, obj.width || 10, obj.height || 10 );			// Setup Mouse Events			reset_mouse ( );		}				// Reset Mouse Events		private function reset_mouse ( evt:MouseEvent = null ) : void {			// Register Event Handlers			GridListener.set ( { target:this, rollOver:on_over, rollOut:reset_mouse, mouseDown:on_down }, { target:stage, mouseUp:null, mouseMove:null } );			// Allow Stage Events			if ( stage ) stage.mouseChildren = true;			// Change the Background Color			opaqueBackground = 0xF4F4F4;			// Stop Dragging			stopDrag ( );		}				// React to Mouse Over Events		private function on_over ( evt:MouseEvent ) : void {			// Change the Background Color			opaqueBackground = 0xFFFFFF;		}				// React to Mouse Down Events		private function on_down ( evt:MouseEvent ) : void {			// Register Event Handlers			GridListener.set ( { target:this, rollOut:null, rollOver:null }, { target:stage, mouseUp:reset_mouse, mouseMove:on_drag } );			// Prevent Mouse Event Conflicts			stage.mouseChildren = false;			// Change the Background Color			opaqueBackground = 0xEEEEEE;			// Begin Dragging			startDrag ( false, drag );		}						// React to Mouse Move Events		private function on_drag ( evt:MouseEvent ) : void {			// Record the Vertical Scroll Percent			var vsc:Number = y / drag.bottom;			// Record the Horizontal Scroll Percent			var hsc:Number = x / drag.right;			// Dispatch the Vertical Scroll Event			if ( !isNaN ( vsc ) ) dispatchEvent ( new GridEvent ( { type:'vScroll', scroll:vsc } ) );			// Dispatch the Horizontal Scroll Event			else if ( !isNaN ( hsc ) ) dispatchEvent ( new GridEvent ( { type:'hScroll', scroll:hsc } ) );		}	}}