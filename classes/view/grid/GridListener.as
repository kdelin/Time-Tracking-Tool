// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.utils.Dictionary;	import flash.events.EventDispatcher;	import flash.events.Event;		// Define the Class	internal class GridListener {				// Create a Dictionary Object		private static var dic:Dictionary = new Dictionary ( true );				// Instantiate the Class		public static function set ( ...arg ) : void {			// Loop through the Arguments			for each ( var obj:Object in arg ) {				// Save a Refence to the Target				var tar:EventDispatcher = obj.target as EventDispatcher;				// Do Nothing if a Target is Missing				if ( !tar ) return;				// Create a Variable for Event Handlers				var fnc:Function;				// Save a Refence to the Target Definintion				var def:Object = dic [ tar ] = dic [ tar ] || { };				// Loop through Object Properties				for ( var pro:String in obj ) {					// Check that Previous Event Handlers Exist					if ( ( fnc = def [ pro ] ) ) {						// Detach Previous Event Handlers						tar.removeEventListener ( pro, fnc, false );						// Erase Previous Event Handlers						delete def [ pro ];					}					// Check that New Event Handlers Exist 					if ( !!( fnc = run ( obj [ pro ] ) ) ) {						// Attach New Event Handlers						tar.addEventListener ( pro, fnc, false, 0, true );						// Save New Event Handlers						def [ pro ] = fnc;					}				}			}		}				// Make a Handler		private static function run ( fnc:* ) : Function {			// Do Nothing if Function doesn't Exist			if ( !( fnc is Array || fnc is Function ) ) return null;			// Save a Reference to a Vector			var arr:Vector.<Function> = Vector.<Function> ( [ ].concat ( fnc ) );			// Save a Reference to the Vecotr Length			var len:int = arr.length;			// Lock the Vector			arr.fixed = true;			// Return a Function			return function ( evt:Event ) : void {				// Execute Given Handlers				for ( var n:int = len, i:int = 0; n--; ) arr [ i++ ] ( evt );			}		}			}}