// Define the Packagepackage classes.view.grid {		// Import Necessary Classes	import flash.filters.DropShadowFilter;	import flash.text.TextField;	import flash.text.AntiAliasType;	import flash.text.TextFormat;	import flash.text.TextFieldType;	import flash.events.Event;	import flash.utils.setTimeout;		// Define the Class	internal class GridText extends TextField {				// Instantiate the Class		public function GridText ( obj:Object ) : void {			// Initialize/ReInitialize Properties			init ( obj );			// Specify the Use of Embeded Fonts			embedFonts = true;			// Set the Text Format			defaultTextFormat = new TextFormat ( 'Arial', 13, 0x333333, null, null, null, null, null, null, 20 );			// Set Event Listeners			GridListener.set ( { target:this, focusIn:on_focus, focusOut:on_blur } );			// Set the Filters			filters = [ new DropShadowFilter ( 1, 90, 0xFFFFFF, 1, 2, 2, 1, 1, false, false, false ) ];			// Set Anti-Alias Property			antiAliasType = AntiAliasType.ADVANCED;			// Set Type			type = TextFieldType.INPUT;			// Allow Double Clicks			doubleClickEnabled = true;			// Prevent Selection			mouseEnabled = false;			// Prevent Multiple Lines			multiline = false;			// Set the Width			width = 780;			// Set the Height			height = 19;		}				// Initialize/ReInitialize Properties		public function init ( obj:Object ) : void {			// Exclude Object Properties			for ( var i:String in [ ] ) delete obj [ n ];			// Initialize/ReInitialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];		}				// React to Focus Events		private function on_focus ( evt:Event ) : void {			//			setTimeout ( setSelection, 0, 0, length );			//			dispatchEvent ( new Event ( 'focus', true ) );		}				// React to Focus Events		private function on_blur ( evt:Event ) : void {			//			dispatchEvent ( new Event ( 'blur', true ) );			//			mouseEnabled = false;		}				// Override the Text Property		public override function set text ( val:String ) : void {			// Only Change Text when Necessary			if ( val != super.text ) super.text = val;		}	}}