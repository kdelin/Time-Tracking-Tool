// Define the Packagepackage classes.view.picklist {		// Import Necessary Classes	import flash.filters.DropShadowFilter;	import flash.text.TextField;	import flash.text.AntiAliasType;	import flash.text.TextFormat;	import flash.text.TextFieldType;	import flash.events.Event;	import flash.utils.setTimeout;	import flash.events.TimerEvent;	import flash.utils.Timer;		import flash.events.KeyboardEvent;				// Define the Class	internal class PLInputText extends TextField {						public function PLInputText ( obj:Object = null ):void {									// set Event listener			PLInputListener.set ( { target:this, focusIn:in_Focus } );			PLInputListener.set ( { target:this, focusOut:out_Focus } );						obj = obj || { };						// Set the Text Format			defaultTextFormat = new TextFormat ( 'Arial', 13, 0x333333, null, null, null, null, null, null, 20, null, null, -8 );						// Set Format properties			antiAliasType = AntiAliasType.ADVANCED;			type = TextFieldType.INPUT;			multiline = false;			doubleClickEnabled = true;			embedFonts = true;						width = obj.width || 200;			height = obj.width || 30;			y = obj.y || 8;						// Initialize/ReInitialize Properties			init ( obj );		}				// Initialize/ReInitialize Properties		public function init ( obj:Object ) : void {			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];		}				// React to Focus Events		private function in_Focus(e:Event ):void {			this.addEventListener(KeyboardEvent.KEY_UP, onKey);		}				public function onKey(e:Event):void {			//trace("new Key = " + this.text);			dispatchEvent(new pickListEvent(pickListEvent.PICKLIST_INPUT_FOCUS_IN, true, false, this.text));					}				private function out_Focus(e:Event ): void {			dispatchEvent(new pickListEvent(pickListEvent.PICKLIST_INPUT_FOCUS_OUT, true, false, this.text));			this.removeEventListener(KeyboardEvent.KEY_UP, onKey);		}							// Override the Text Property		public override function set text ( val:String ) : void {			// Only Change Text when Necessary			if ( val !== null && typeof val !== 'undefined' && val != super.text ) super.text = val;		}	}}