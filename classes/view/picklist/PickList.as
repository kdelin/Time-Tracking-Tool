// Define the Packagepackage classes.view.picklist {		// Import Necessary Classes	import flash.filters.DropShadowFilter;	import flash.display.DisplayObject;	import flash.filters.GlowFilter;	import flash.events.Event;	import flash.display.MovieClip;	import flash.display.Stage;		import classes.view.picklist.PLInputText;	import classes.view.picklist.PLInputHint;	import classes.view.picklist.pickListEvent;		// Define the Class	public final class PickList extends PickListSprite {				private var rowCount					:int;   						// number of rows in list		private var mh							:int;	 						// height used for backround graphic		private var ih							:int = 44.5;					// height of input field			private var lh							:int = 29;						// height of list item		private var ly							:int = 23;						// list y				private var nt							:String;						// new text, used as temp holder				private var ud							:Boolean = false;				// direction of pick list - true = up, false = down				public var mc_hint						:MovieClip = new MovieClip();	// movieclip that holds hint text		public var mc_input						:MovieClip = new MovieClip();	// movieclip that holds input text		public var mc_list						:MovieClip = new MovieClip();	// movieclip that holds pick list				public var nobj							:Object = new Object();			// new object used as temp object								// Instantiate the Class		public function PickList (obj:Object = null ) : void {						// Ensure that an Object Exists - populate temp obj			obj = obj || new Object ( ); nobj = obj;						// Listen for events					this.addEventListener(pickListEvent.PICKLIST_ITEM_CLICK, listItemClick);			this.addEventListener(pickListEvent.PICKLIST_INPUT_FOCUS_IN, trackKeys);			PLInputListener.set ( { target:this, addedToStage:on_added });					}				// Proceed once added to stage		public function on_added(e:Event ):void {						// Create MovieClip that will house Picklist items			addChild(mc_hint);			addChild(mc_input);			addChild(mc_list);						// Create GlowFilter Object			filters = filters.concat ( new GlowFilter ( 0, 1, 3, 3, 1, 1, true, false ) );			// Create DropShadowFilter Object			filters = filters.concat ( new DropShadowFilter ( 10, 89.9993809572637, 0, 1, 20, 20, 0.09765625,3, true, false, false ) );			// Create DropShadowFilter Object			filters = filters.concat ( new DropShadowFilter ( 2, 89.9993809572637, 0, 1, 6, 6, 0.5, 3, false, false, false ) );									// determine if list is going up or down						if ( nobj.y > (stage.stageHeight/2)-ih ) { ud = true; };						// place existing content						nt = nobj.rowInfo[nobj.index]; nt = nt.substring(1);			mc_hint.addChild(new PLInputHint({ text:nt }));			mc_input.addChild(new PLInputText({ text:nt }));						// set up number of rows in picklist			rowCount = nobj.rowInfo.length;						// add list items to stage			for ( var i:int = 0; i < rowCount; i++ ) {				if ( ud ) {					mc_list.addChild(new PLitem({ mw:nobj.width, y:-((ly-10)+(lh*(i+1))), text:nobj.rowInfo[i], over:false }));				} else {					mc_list.addChild(new PLitem({ mw:nobj.width, y:ly+(lh*(i+1)), text:nobj.rowInfo[i], over:false }));				}			}						// Initialize/Reinitialize Properties			init ( nobj );		}				// Initialize/Reinitialize Properties		public function init ( obj:Object = null ) : void {						// Initialize/Reinitialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];						// Reset the Scale			scaleX = scaleY = 1;						// Draw graphics			drawGraphics();					}				private function drawGraphics():void {						mh = ly+(lh*rowCount);						graphics.clear();			graphics.beginFill(0xFFFFFF);			graphics.drawRect( 0, 0, nobj.width, ih);						mc_list.graphics.beginFill(0xFFFFFF);			if ( ud ) {				mc_list.graphics.drawRect( 0, -(mh+1), nobj.width, mh );			} else {				mc_list.graphics.drawRect( 0, ih+1, nobj.width, mh );			}					}				private function removeListItems():void {						mc_hint.removeChildAt(0);						var i:int = mc_list.numChildren;						for ( var x:int = i; x--; ) { mc_list.removeChildAt(x); };		}				public function trackKeys(e:pickListEvent):void {						removeListItems();						var a	:Array = new Array(); 							// array to hold final list			var ta	:Array = new Array();							// temp array to hold match list						var t	:String = e.content; t = t.toLowerCase();		// text from input field			var tl	:int = t.length;								// length of input field			var th	:String = "";									// hint text, used as temp holder						for ( var x:int = 0; x < rowCount; x++ ) {										var s:String = nobj.rowInfo[x]; s = s.substring(1); s = s.substr(0, tl); s = s.toLowerCase();								if ( t == s && t.length > 0 ) { ta.push(nobj.rowInfo[x]); };							}						if ( ta.length > 0 ) { a.push(ta[0]); };									for ( x = 0; x < rowCount; x++ ) { 				if ( ta[0] != nobj.rowInfo[x] ) { a.push(nobj.rowInfo[x]); };							}						for ( x = 0; x < a.length; x++ ) { 				if ( x == 0 && ta.length != 0) {										// handle hint copy 					th = a[x];					th = e.content + th.substring(tl+1);										mc_hint.addChild(new PLInputHint({ text:th }));										if ( ud ) { 						mc_list.addChild(new PLitem({ mw:nobj.width, y:-((ly-10)+(lh*(x+1))), text:a[x], over:true }));					} else {						mc_list.addChild(new PLitem({ mw:nobj.width, y:ly+(lh*(x+1)), text:a[x], over:true }));					}				} else {					if ( x == 0 ) { mc_hint.addChild(new PLInputHint({ text:"" })); };										if ( ud ) {						mc_list.addChild(new PLitem({ mw:nobj.width, y:-((ly-10)+(lh*(x+1))), text:a[x], over:false }));					} else {						mc_list.addChild(new PLitem({ mw:nobj.width, y:ly+(lh*(x+1)), text:a[x], over:false }));					}				}			}						drawGraphics();		}				// respond to pick list item click - replace input text				private function listItemClick(e:pickListEvent):void {			mc_input.removeChildAt(0);			nt = e.content; nt = nt.substring(1);			mc_input.addChild( new PLInputText ({ text:nt }));		}						// End all Loops and Listeners		public function end ( evt:Event = null ) : void {			dispatchEvent ( new Event ( 'end', true ) );		}	}}