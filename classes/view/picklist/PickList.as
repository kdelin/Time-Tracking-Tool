// Define the Packagepackage classes.view.picklist {		// Import Necessary Classes	import flash.filters.DropShadowFilter;	import flash.display.DisplayObject;	import flash.filters.GlowFilter;	import flash.events.Event;	import flash.display.MovieClip;		import classes.view.picklist.PLInputText;	import classes.view.picklist.pickListEvent;		// Define the Class	public final class PickList extends PickListSprite {				public var inputtext					:Vector.<PLInputText> = new <PLInputText> [ ];				private var rowCount					:int;				private var nt							:String;				public var mc_input						:MovieClip = new MovieClip();		public var mc_list						:MovieClip = new MovieClip();				public var nobj							:Object = new Object();						// Instantiate the Class		public function PickList ( obj:Object = null ) : void {						// Listen for events					this.addEventListener(pickListEvent.PICKLIST_ITEM_OVER, listItemOver);			this.addEventListener(pickListEvent.PICKLIST_ITEM_OUT, listItemOut);			this.addEventListener(pickListEvent.PICKLIST_ITEM_CLICK, listItemClick);						this.addEventListener(pickListEvent.PICKLIST_INPUT_FOCUS_IN, trackKeys);			this.addEventListener(pickListEvent.PICKLIST_INPUT_FOCUS_OUT, inputOutFocus);								// Ensure that an Object Exists			obj = obj || { };			nobj = obj;									// Create MovieClip that will house Picklist items			addChild(mc_input);			addChild(mc_list);						// Create GlowFilter Object			filters = filters.concat ( new GlowFilter ( 0, 1, 3, 3, 1, 1, true, false ) );			// Create DropShadowFilter Object			filters = filters.concat ( new DropShadowFilter ( 10, 89.9993809572637, 0, 1, 20, 20, 0.09765625,3, true, false, false ) );			// Create DropShadowFilter Object			filters = filters.concat ( new DropShadowFilter ( 2, 89.9993809572637, 0, 1, 6, 6, 0.5, 3, false, false, false ) );									// place existing content						var nt:String = obj.rowInfo[0]; nt = nt.substring(1);			mc_input.addChild( new PLInputText ({ text:nt }));						// set up number of rows in picklist			rowCount = obj.rowInfo.length;						// add list items to stage			for ( var i:int = 0; i < rowCount; i++ ) {				mc_list.addChild ( new PLitem ( { myWidth:obj.width, y:23+(29*(i+1)), text:obj.rowInfo[i] } ) );			}						// Initialize/Reinitialize Properties			init ( obj );		}				// Initialize/Reinitialize Properties		public function init ( obj:Object = null ) : void {						// Initialize/Reinitialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];						// Reset the Scale			scaleX = scaleY = 1;						// Determine height of Picklist						var mh:int = 23+(29*(rowCount+1));						if ( mh > 163.5 ) { mh = 163.5; };						if ( obj.height > 163.5 ) { obj.height = 163.5; };									// Draw graphics			graphics.clear();			graphics.beginFill(0xFFFFFF);			graphics.drawRect( 0, 0, obj.width || 200, obj.height || 44.5 );						graphics.beginFill(0xFFFFFF);			graphics.drawRect( 0, 45.5, obj.width || 200, mh );					}						// functions for resetting text 				public function listItemOver(e:pickListEvent):void {			mc_input.removeChildAt(0);			mc_input.addChild( new PLInputText ({ text:e.content })); 				}				public function removeListItems():void {						var i:int = mc_list.numChildren;						for ( var x:int = i; x--; ) {				mc_list.removeChildAt(x);			}		}				public function trackKeys(e:pickListEvent):void {						removeListItems();						var nl	:Array = new Array();						var t	:String = e.content; t = t.substring(1); t = t.toLowerCase();			var tl	:int = t.length;			var c	:int = 1;			var rc	:int = 0;										for ( var x:int = 0; x < rowCount; x++ ) {								var s	:String = nobj.rowInfo[x]; s = s.substring(1); s = s.substr(0, tl); s = s.toLowerCase();										if ( t == s ) { nl.push(nobj.rowInfo[x]); };			}						rc = nl.length+1;			nl.reverse();						if ( t.length > 1 ) {				for ( x = 0; x < rc; x++ ) {					mc_list.addChild ( new PLitem ( { myWidth:nobj.width, y:23+(29*(x+1)), text:nl[x] } ) );				}			} else {				for ( x = 0; x < rowCount; x++ ) {					mc_list.addChild ( new PLitem ( { myWidth:nobj.width, y:23+(29*(x+1)), text:nobj.rowInfo[x] } ) );				}			}		}								public function listItemOut(e:pickListEvent):void {			//trace(e.content);					}				public function listItemClick(e:pickListEvent):void {			mc_input.removeChildAt(0);						mc_input.addChild( new PLInputText ({ text:e.content }));		}				public function inputInFocus(e:pickListEvent):void {			trace(e.content);		}				public function inputOutFocus(e:pickListEvent):void {			trace(e.content);					}						// End all Loops and Listeners		public function end ( evt:Event = null ) : void {			dispatchEvent ( new Event ( 'end', true ) );		}	}}