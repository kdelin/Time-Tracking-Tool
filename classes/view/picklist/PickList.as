// Define the Packagepackage classes.view.picklist {		// Import Necessary Classes	import flash.filters.DropShadowFilter;	import flash.display.DisplayObject;	import flash.filters.GlowFilter;	import flash.events.Event;	import flash.display.MovieClip;		import classes.view.picklist.PLInputText;	import classes.view.picklist.pickListEvent;		// Define the Class	public final class PickList extends PickListSprite {				// Crate a Vector for InputText Objects		public var inputtext:Vector.<PLInputText> = new <PLInputText> [ ];				// create var for PickList Row count		private var rowCount:int;		// create var for text		public var text:String;		// create movieclips		public var mc_input:MovieClip = new MovieClip();		public var mc_list:MovieClip = new MovieClip();				// Instantiate the Class		public function PickList ( obj:Object = null ) : void {						// Listen for events				this.addEventListener(pickListEvent.PICKLIST_ITEM_OVER, listItemOver);		this.addEventListener(pickListEvent.PICKLIST_ITEM_OUT, listItemOut);		this.addEventListener(pickListEvent.PICKLIST_ITEM_CLICK, listItemClick);						// Ensure that an Object Exists			obj = obj || { };						// Create MovieClip that will house Picklist items			addChild(mc_input);			addChild(mc_list);						// Create GlowFilter Object			filters = filters.concat ( new GlowFilter ( 0, 1, 3, 3, 1, 1, true, false ) );			// Create DropShadowFilter Object			filters = filters.concat ( new DropShadowFilter ( 10, 89.9993809572637, 0, 1, 20, 20, 0.09765625,3, true, false, false ) );			// Create DropShadowFilter Object			filters = filters.concat ( new DropShadowFilter ( 2, 89.9993809572637, 0, 1, 6, 6, 0.5, 3, false, false, false ) );									// place existing content			mc_input.addChild( new PLInputText ({ text:obj.rowInfo[0] }));						// set up number of rows in picklist			rowCount = obj.rowInfo.length;						// add list items to stage			for ( var i:int = 0; i < rowCount; i++ ) {				mc_list.addChild ( new PLitem ( { myWidth:obj.width, y:23+(29*(i+1)), text:obj.rowInfo[i] } ) );			}						// Initialize/Reinitialize Properties			init ( obj );		}				// Initialize/Reinitialize Properties		public function init ( obj:Object = null ) : void {						// Initialize/Reinitialize Properties			for ( var n:String in obj ) if ( n in this ) this [ n ] = obj [ n ];						// Reset the Scale			scaleX = scaleY = 1;						// Determine height of Picklist						var mh:int = 23+(29*(rowCount+1));						if ( mh > 163.5 ) { mh = 163.5; };						if ( obj.height > 163.5 ) { obj.height = 163.5; };									// Draw graphics			graphics.clear();			graphics.beginFill(0xFFFFFF);			graphics.drawRect( 0, 0, obj.width || 200, obj.height || 44.5 );						graphics.beginFill(0xFFFFFF);			graphics.drawRect( 0, 45.5, obj.width || 200, mh );					}				public function listItemOver(e:pickListEvent):void {			mc_input.removeChildAt(0);			mc_input.addChild( new PLInputText ({ text:e.content })); 				}				public function listItemOut(e:pickListEvent):void {			//trace(e.content);					}				public function listItemClick(e:pickListEvent):void {			mc_input.removeChildAt(0);			mc_input.addChild( new PLInputText ({ text:e.content }));		}						// End all Loops and Listeners		public function end ( evt:Event = null ) : void {			dispatchEvent ( new Event ( 'end', true ) );		}	}}